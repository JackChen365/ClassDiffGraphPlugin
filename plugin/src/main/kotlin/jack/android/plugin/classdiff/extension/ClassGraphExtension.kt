package jack.android.plugin.classdiff.extension

import groovy.lang.Closure
import org.gradle.util.ConfigureUtil
import java.io.File

/**
 * ClassGraphExtension is used directly by java or android build.gradle.
 * when configuring project so adding generics declaration is not possible.
 *
 * @see getComponentFiles
 * @see getLibraryMapper
 * @see getFilterPackageList
 */
open class ClassGraphExtension {
    /**
     * The component list file. We will add a default component file generated by the transform.
     */
    private var mComponentFiles: Array<File>? = null

    /**
     * The library mapping for the class graph.
     * For example: java.lang.Integer/java.lang.Short if we have added the library: java
     * We consider all the java.lang belongs to java. This could help to reduce the class graph.
     */
    private val mLibraryMapper = mutableMapOf<String, String>()

    /**
     * The filter package list.
     */
    private var mFilterPackages = emptyList<String>()

    fun componentListFiles(files: Array<File>) {
        mComponentFiles = files
    }

    fun library(closure: Closure<Library>) {
        val library = Library()
        ConfigureUtil.configure(closure, library)
        val packageName = library.packageName
        val desc = library.desc
        if (null != packageName && null != desc) {
            mLibraryMapper[packageName] = desc
        }
        val includes = library.includes
        if (null != includes && null != desc) {
            mLibraryMapper += includes.associateWith { desc }
        }
    }

    fun filterPackages(files: Array<String>) {
        mFilterPackages = files.toList()
    }

    fun getLibraryMapper() = mLibraryMapper

    fun getComponentFiles() = mComponentFiles

    fun getFilterPackageList() = mFilterPackages

    inner class Library {
        var packageName: String? = null
        var includes: Array<String>? = null
        var desc: String? = null
    }
}